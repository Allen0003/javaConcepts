

Java 8

***** stream ******

Exercise 3: Print out the sum of ages of all female authors younger than 25.

int sum = library.stream()
          .map(Book::getAuthor)
          .filter(author -> author.getGender() == Gender.FEMALE)
          .map(Author::getAge)
          .filter(age -> age < 25)
          .reduce(0, Integer::sum)
          
Exercise 4: Return first employee with a salary greater than 100000 . If no such employee exists, then null is returned.          

Employee employee = 
      Stream.of(empIds)
      .map(employeeRepository::findById)
      .filter(e -> e != null)
      .filter(e -> e.getSalary() > 100000)
      .findFirst()
      .orElse(null);
      
      
      
      
Boxing and Unboxing      

There’re times when we need to convert primitive values to their wrapper equivalents.

List<Integer> evenInts = IntStream.rangeClosed(1, 10)
  .filter(i -> i % 2 == 0)
  .boxed()
  .collect(Collectors.toList());
  
  
// returns 78
int sum = Arrays.asList(33,45)
  .stream()
  .mapToInt(i -> i)
  .sum();


***** lambda ******

You are obviously encountering the first-time initialization overhead of lambda expressions. As already mentioned in the comments, the classes for lambda expressions are generated at runtime rather than being loaded from your class path.

However, being generated isn’t the cause for the slowdown. After all, generating a class having a simple structure can be even faster than loading the same bytes from an external source. 

Since Leetcode itself apparently doesn’t use lambda expressions before entering your code, whose execution time gets measured, this overhead adds to your execution time here.


***** Stream *****

1. Simply put, streams are wrappers around a data source, allowing us to operate with that data source and making bulk processing convenient and fast.

2. A stream does not store data and, in that sense, is not a data structure. It also never modifies the underlying data source.

3. This new functionality – java.util.stream – supports functional-style operations on streams of elements, such as map-reduce transformations on collections.



***** Meaning of :: in Java syntax *****

This is method reference. Added in Java 8.

TreeSet::new refers to the default constructor of TreeSet.

In general A::B refers to method B in class A.







***** AtomicInteger *****
The package java.concurrent.atomic contains many useful classes to perform atomic operations. An operation is atomic when you can safely perform the operation in parallel on multiple threads without using the synchronized keyword or locks as shown in my previous tutorial.

Internally, the atomic classes make heavy use of compare-and-swap (CAS), an atomic instruction directly supported by most modern CPUs. Those instructions usually are much faster than synchronizing via locks. 


